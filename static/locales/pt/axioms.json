{
  "title1": "Pensou, não é XGH.",
  "description1": "XGH não pensa, faz a primeira coisa que vem à mente. Não existe segunda opção, a única opção é a mais rápida.",
  "title2": "Existem 3 formas de se resolver um problema, a correta, a errada e a XGH, que é igual à errada, só que mais rápida.",
  "description2": "XGH é mais rápido que qualquer metodologia de desenvolvimento de software que você conhece (vide axioma 14). ",
  "title3": "Quanto mais XGH você faz, mais precisará fazer.",
  "description3": "Para cada problema resolvido usando XGH, mais uns 7 são criados. Mas todos eles serão resolvidos da forma XGH. XGH tende ao infinito. ",
  "title4": "XGH é totalmente reativo.",
  "description4": "Os erros só existem quando aparecem.",
  "title5": "XGH vale tudo.",
  "description5": "Resolveu o problema? Compilou? Commit e era isso.",
  "title6": "Commit sempre antes de update.",
  "description6": "Se der m***, a sua parte estará sempre correta... e seus colegas que se f***.",
  "title7": "XGH não tem prazo.",
  "description7": "Os prazos passados pelo seu cliente são meros detalhes. Você SEMPRE conseguirá implementar TUDO no tempo necessário (nem que isso implique em acessar o BD por um script mutreta).",
  "title8": "Esteja preparado para pular fora quando o barco começar a afundar ou coloque a culpa em alguém ou algo.",
  "description8": "Pra quem usa XGH, um dia o barco afunda. Quanto mais o tempo passa, mais o sistema vira um monstro. O dia que a casa cair, é melhor seu curriculum estar atualizado, ou ter algo pra colocar a culpa. ",
  "title9": "Seja autêntico, XGH não respeita padrões.",
  "description9": "Escreva o código como você bem entender, se resolver o problema, commit e era isso.",
  "title10": "Não existe refactoring, apenas rework.",
  "description10": "Se der m***, refaça um XGH rápido que solucione o problema. O dia que o rework implicar em reescrever a aplicação toda, pule fora, o barco irá afundar",
  "title11": "XGH é totalmente anárquico.",
  "description11": "A figura de um gerente de projeto é totalmente descartável. Não tem dono, cada um faz o que quiser na hora que os problemas e requisitos vão surgindo (vide axioma 4).",
  "title12": "Se iluda sempre com promessas de melhorias.",
  "description12": "Colocar TODO no código como uma promessa de melhoria ajuda o desenvolvedor XGH a não sentir remorso ou culpa pela cagada que fez. É claro que o refactoring nunca será feito (vide axioma 10).",
  "title13": "XGH é absoluto, não se prende à coisas relativas.",
  "description13": "Prazo e custo são absolutos, qualidade é totalmente relativa. Jamais pense na qualidade e sim no menor tempo que a solução será implementada, aliás? não pense, faça! ",
  "title14": "XGH é atemporal.",
  "description14": "Scrum, XP? tudo isso é modinha. O XGH não se prende às modinhas do momento. XGH sempre foi e sempre será usado por aqueles que desprezam a qualidade.",
  "title15": "XGH nem sempre é POG.",
  "description15": "Muitas POGs? Tá ERRADO! Muitas POGs exigem um raciocínio muito elevado, XGH não raciocina (vide axioma 1).",
  "title16": "Não tente remar contra a maré.",
  "description16": "Caso seus colegas de trabalho usam XGH para programar e você é único que gosta de fazer as coisas certinhas, esqueça! Pra cada Design Pattern que você usa corretamente, seus colegas gerarão 10 vezes mais código podre usando XGH.",
  "title17": "O XGH não é perigoso até surgir um pouco de ordem.",
  "description17": "Este axioma é muito complexo, mas sugere que o projeto utilizando XGH está em meio ao caos. Não tente por ordem no XGH (vide axioma 16), é inútil e você pode jogar um tempo precioso no lixo. Isto fará com que o projeto afunde mais rápido ainda, não tente gerenciar o XGH, ele é auto suficiente (vide axioma 11), assim como o caos.",
  "title18": "O XGH é seu brother, mas é vingativo.",
  "description18": "Enquanto você quiser, o XGH sempre estará do seu lado. Mas cuidado, não o abandone. Se começar um sistema utilizando XGH e abandoná-lo para utilizar uma metodologia da moda, você estará ferrado. O XGH não permite refactoring (vide axioma 10), e seu novo sistema cheio de modinhas entrará em colapso. E nessa hora, somente o XGH poderá salvá-lo.",
  "title19": "Se tiver funcionando, não rela a mão.",
  "description19": "Nunca altere, e muito menos questione um código funcionando. Isso é perda de tempo, mesmo porque refactoring não existe (vide axioma 10). Tempo é a engrenagem que move o XGH e qualidade é um detalhe desprezível.",
  "title20": "Testes são para os fracos.",
  "description20": "Se você botou a mão num sistema XGH, é melhor saber o que está fazendo. E se você sabe o que está fazendo, vai testar pra que? Testes são desperdício de tempo, se o código compilar, é o suficiente.",
  "title21": "Acostume-se ao sentimento de fracasso iminente.",
  "description21": "O fracasso e o sucesso andam sempre de mãos dadas, e no XGH não é diferente. As pessoas costumam achar que as chances do projeto fracassar utilizando XGH são sempre maiores do que ele ser bem sucedido. Mas sucesso e fracasso são uma questão de ponto de vista. O projeto foi por água abaixo mas você aprendeu algo? Então pra você foi um sucesso!",
  "title22": "O problema só é seu quando seu nome está no Doc da classe.",
  "description22": "Nunca toque em uma classe cujo autor não é você. Caso um membro da equipe morra ou fique doente por muito tempo, o barco irá afundar! Nesse caso, utilize o axioma 8.",
  "title23": "Mais é mais",
  "description23": "Com o XGH você prospera na duplicação de código - a qualidade do código não tem sentido e não há tempo para revisões de código ou refatoração. O tempo é essencial, então copie e cole, rapidamente.",
  "title24": "StackOverflow code style",
  "description24": "Não importa o que você sabe ou não sabe. Escreva sua dúvida no StackOverflow, cópie e cole no seu código. Funcionou? Bom garoto, você é um gênio!"
}
